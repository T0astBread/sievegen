#! /usr/bin/env nix-shell
#! nix-shell -p python3 python39Packages.managesieve -i python3

"""sg-update generates and uploads a Sieve script from the alias list."""

import getpass
import json
import os
import sys

import managesieve

DOMAIN_PLACEHOLDER = "%domain%"
LOCALPART_CONDITIONS_PLACEHOLDER = "%localpart_conditions%"

template = f"""
# auto-generated by some random Python script
require [ "fileinto" ];

if allof (
    address :is :domain "to" "{DOMAIN_PLACEHOLDER}",
    not address :is :localpart "to" [
{LOCALPART_CONDITIONS_PLACEHOLDER}
    ]
) {{
    fileinto "Junk";
    stop;
}}
"""


def generate_sieve_source(domain: str, aliases) -> str:
    """
    generate_sieve_source generates a Sieve script for the given
    domain and aliases.
    """

    localpart_conditions = ",\n".join(
        [f'{" "*8}"{alias["localpart"]}"' for alias in aliases]
    )

    return (
        template.replace(DOMAIN_PLACEHOLDER, domain)
        .replace(LOCALPART_CONDITIONS_PLACEHOLDER, localpart_conditions)
        .strip()
    )


def upload_sieve_filter(managesieve_config, sieve_source: str):
    """
    upload_sieve_filter uploads the given Sieve filter to the
    ManageSieve server described in the config.
    """

    host = managesieve_config["host"]
    port = managesieve_config["port"]
    script_name = managesieve_config["script_name"]
    username = managesieve_config["username"]

    print("Setting up client...")
    managesieve_client = managesieve.MANAGESIEVE(host, port, use_tls=True)
    print("Set up client")

    password = getpass.getpass(f"Password for user {username} at {host}:{port}: ")

    print("Authenticating...")
    auth_response = managesieve_client.authenticate(
        managesieve.AUTH_PLAIN, username, password
    )
    if auth_response != "OK":
        raise Exception(f'authenticate response was not "OK" but "{auth_response}"')
    print("Authenticated")

    try:
        print("Uploading Sieve script...")
        putscript_response = managesieve_client.putscript(script_name, sieve_source)
        if putscript_response != "OK":
            raise Exception(
                f'putscript response was not "OK" but "{putscript_response}"'
            )
        print("Uploaded Sieve script ðŸŽ‰")
    finally:
        print("Logging out...")
        logout_response = managesieve_client.logout()
        if logout_response != "OK":
            raise Exception(f'logout response was not "OK" but "{logout_response}"')
        print("Logged out")


def main():
    """main is the main function of the script."""

    config_file = os.environ["CONFIG_FILE"]
    config = None
    with open(config_file, encoding="utf-8") as f:
        config = json.load(f)

    aliases = None
    with open(config["aliases_file"], encoding="utf-8") as f:
        aliases = json.load(f)

    sieve_source = generate_sieve_source(config["domain"], aliases)

    if len(sys.argv) > 1 and sys.argv[1] == "--stdout":
        print(sieve_source)
    else:
        upload_sieve_filter(config["managesieve"], sieve_source)


if __name__ == "__main__":
    main()
